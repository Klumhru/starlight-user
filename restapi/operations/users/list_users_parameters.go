package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListUsersParams creates a new ListUsersParams object
// with the default values initialized.
func NewListUsersParams() ListUsersParams {
	var (
		limitDefault = int32(20)
	)
	return ListUsersParams{
		Limit: &limitDefault,
	}
}

// ListUsersParams contains all the bound params for the list users operation
// typically these are obtained from a http.Request
//
// swagger:parameters listUsers
type ListUsersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  In: query
	  Default: 20
	*/
	Limit *int32
	/*
	  Max Length: 12
	  Min Length: 12
	  In: query
	*/
	Since *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ListUsersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qSince, qhkSince, _ := qs.GetOK("since")
	if err := o.bindSince(qSince, qhkSince, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUsersParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var limitDefault int32 = int32(20)
		o.Limit = &limitDefault
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int32", raw)
	}
	o.Limit = &value

	return nil
}

func (o *ListUsersParams) bindSince(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Since = &raw

	if err := o.validateSince(formats); err != nil {
		return err
	}

	return nil
}

func (o *ListUsersParams) validateSince(formats strfmt.Registry) error {

	if err := validate.MinLength("since", "query", (*o.Since), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("since", "query", (*o.Since), 12); err != nil {
		return err
	}

	return nil
}
