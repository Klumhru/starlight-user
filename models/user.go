package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
// swagger:model user
type User struct {

	// created
	// Read Only: true
	Created strfmt.DateTime `json:"created,omitempty"`

	// id
	// Read Only: true
	// Max Length: 12
	// Min Length: 12
	ID string `json:"id,omitempty"`

	// identity
	Identity *UserIdentity `json:"identity,omitempty"`

	// updated
	// Read Only: true
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIdentity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 12); err != nil {
		return err
	}

	return nil
}

func (m *User) validateIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.Identity) { // not required
		return nil
	}

	if m.Identity != nil {

		if err := m.Identity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

// UserIdentity user identity
// swagger:model UserIdentity
type UserIdentity struct {

	// email
	Email strfmt.Email `json:"email,omitempty"`

	// family name
	FamilyName string `json:"familyName,omitempty"`

	// given name
	GivenName string `json:"givenName,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// picture Url
	PictureURL string `json:"pictureUrl,omitempty"`

	// provider
	// Min Length: 1
	Provider string `json:"provider,omitempty"`

	// provider Id
	// Min Length: 1
	ProviderID string `json:"providerId,omitempty"`

	// verified email
	VerifiedEmail *bool `json:"verifiedEmail,omitempty"`
}

// Validate validates this user identity
func (m *UserIdentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvider(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserIdentity) validateProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if err := validate.MinLength("identity"+"."+"provider", "body", string(m.Provider), 1); err != nil {
		return err
	}

	return nil
}

func (m *UserIdentity) validateProviderID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderID) { // not required
		return nil
	}

	if err := validate.MinLength("identity"+"."+"providerId", "body", string(m.ProviderID), 1); err != nil {
		return err
	}

	return nil
}
